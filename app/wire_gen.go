// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"database/sql"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
	"github.com/xans-me/authopia/core/configuration"
	"github.com/xans-me/authopia/core/environment"
	"github.com/xans-me/authopia/core/obs"
	"google.golang.org/grpc"
	"log"
	"net"
	"os"
	"os/signal"
)

// Injectors from configWire.go:

func InitializeAppConfig() (*configuration.AppConfig, error) {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	return appConfig, nil
}

var (
	_wireEnvironmentConfigBinderPropertiesValue = configuration.EnvironmentConfigBinderProperties{
		FileName: "app-config",
		Path:     "./env",
	}
)

// Injectors from injector.go:

func InjectAppEnvironment() (environment.AppEnvironment, error) {
	appEnvironment, err := ProvideAppEnvironment()
	if err != nil {
		return "", err
	}
	return appEnvironment, nil
}

func InjectAppConfig() configuration.AppConfig {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	configurationAppConfig := ProvideAppEnvConfig(appConfig)
	return configurationAppConfig
}

func InjectLogger() (*logrus.Logger, error) {
	appEnvironment, err := ProvideAppEnvironment()
	if err != nil {
		return nil, err
	}
	logger := ProvideLogger(appEnvironment)
	return logger, nil
}

func InjectPostgres() *sql.DB {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	db := ProvidePostgres(appConfig)
	return db
}

func InjectGRPC() *grpc.Server {
	server := ProvideGRPC()
	return server
}

func InjectListener() net.Listener {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	listener := ProvideListener(appConfig)
	return listener
}

// configWire.go:

var (
	configModuleSets = wire.NewSet(wire.Value(configuration.EnvironmentConfigBinderProperties{
		FileName: "app-config",
		Path:     "./env",
	}), ProvideAppConfig)
)

func ProvideAppConfig(properties configuration.EnvironmentConfigBinderProperties) *configuration.AppConfig {
	environmentConfigBinder := configuration.NewEnvironmentConfigBinder(properties)
	environmentConfigBinder.Bind()
	config, err := environmentConfigBinder.GetAppConfig()
	if err != nil {
		panic(err)
	}
	return config
}

// injector.go:

var (
	AppModule = wire.NewSet(
		configModuleSets,
		ProvideAppEnvironment,
		ProvideAppEnvConfig,
		ProvideLogger,
		ProvidePostgres,
		ProvideGRPC,
		ProvideListener,
		ProvideKeycloakConfig,
		ProvideTracer,
	)
)

func InjectProvider() {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()
	shutdown, err := obs.InitProvider()
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := shutdown(ctx); err != nil {
			log.Fatal("failed to shutdown TracerProvider: %w", err)
		}
	}()
}
